// Mocks generated by Mockito 5.2.0 from annotations
// in todo/test/features/task/bloc/task_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_result/simple_result.dart' as _i2;
import 'package:todo/models/failure.dart' as _i6;
import 'package:todo/models/task.dart' as _i5;
import 'package:todo/repos/task/task_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResult_0<Success, Failure> extends _i1.Fake
    implements _i2.Result<Success, Failure> {}

/// A class which mocks [ITaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.ITaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.Task>, _i6.Failure>> getTasks(
          {bool? isDone}) =>
      (super.noSuchMethod(Invocation.method(#getTasks, [], {#isDone: isDone}),
          returnValue: Future<_i2.Result<List<_i5.Task>, _i6.Failure>>.value(
              _FakeResult_0<List<_i5.Task>, _i6.Failure>())) as _i4
          .Future<_i2.Result<List<_i5.Task>, _i6.Failure>>);
  @override
  _i4.Future<_i2.Result<_i5.Task, _i6.Failure>> getTask({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getTask, [], {#id: id}),
              returnValue: Future<_i2.Result<_i5.Task, _i6.Failure>>.value(
                  _FakeResult_0<_i5.Task, _i6.Failure>()))
          as _i4.Future<_i2.Result<_i5.Task, _i6.Failure>>);
  @override
  _i4.Future<_i2.Result<_i5.Task, _i6.Failure>> createTask({_i5.Task? task}) =>
      (super.noSuchMethod(Invocation.method(#createTask, [], {#task: task}),
              returnValue: Future<_i2.Result<_i5.Task, _i6.Failure>>.value(
                  _FakeResult_0<_i5.Task, _i6.Failure>()))
          as _i4.Future<_i2.Result<_i5.Task, _i6.Failure>>);
  @override
  _i4.Future<_i2.Result<_i5.Task, _i6.Failure>> updateTask({_i5.Task? task}) =>
      (super.noSuchMethod(Invocation.method(#updateTask, [], {#task: task}),
              returnValue: Future<_i2.Result<_i5.Task, _i6.Failure>>.value(
                  _FakeResult_0<_i5.Task, _i6.Failure>()))
          as _i4.Future<_i2.Result<_i5.Task, _i6.Failure>>);
}
